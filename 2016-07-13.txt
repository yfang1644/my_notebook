交叉编译arm-linux-gcc
-rpath-link/-rpath支持：
选项-with-sysroot导致支持-rpath
但链接库路径找不到
-rpath-link=DIR可以用

完整的交叉编译：

#!/bin/bash

#-------------------------------------------------------------------------
# This script will download packages for, configure, build and install a GCC 
# cross-compiler. Customize the variables (INSTALL_PATH, TARGET, etc.) to
# your liking before running. If you get an error and need to resume the 
# script from some point in the middle, just delete/comment the preceding 
# lines before running it again.
#
# See: http://preshing.com/20141119/how-to-build-a-gcc-cross-compiler
#--------------------------------------------------------------------------

INSTALL_PATH=/opt/arm-2016.08
HOST_NAME=`gcc -dumpmachine`
TARGET_NAME=arm-none-linux-gnueabi
LINUX_ARCH=arm
#possible           SUBARCH     TARGET_FLOAT     TARGET_FPU
# x210(cortex-a8)   armv7-a        hard            neon
# bbb(cortex-a8)    armv7-a        hard            vfpv3
# rpi(arm1176jzf)   armv6zk        hard            vfp
# rpi2(cortex-a7)   armv7ve        hard            neon-vfpv4
# rpi3(cortex-a53)  armv8-a(aarch64) hard          neon-vfpv4

BINUTILS_VERSION=binutils-2.26
GCCVERSION=5.4.0
GCC_VERSION=gcc-$GCCVERSION
LINUX_KERNEL_VERSION=linux-4.4
GLIBC_VERSION=glibc-2.13
MPFR_VERSION=mpfr-3.1.3
GMP_VERSION=gmp-6.1.0
MPC_VERSION=mpc-1.0.3
ISL_VERSION=isl-0.14
CLOOG_VERSION=cloog-0.18.4
export PATH=$INSTALL_PATH/bin:$PATH
WORKDIR=`pwd`

download_packages() {
# Download packages
  cd $WORKDIR

#wget binutils,gcc,glibc,mpfr,gmp,mpc,isl,cloog
  export http_proxy=$HTTP_PROXY https_proxy=$HTTP_PROXY ftp_proxy=$HTTP_PROXY
  wget http://ftpmirror.gnu.org/binutils/$BINUTILS_VERSION.tar.bz2
  wget http://ftpmirror.gnu.org/gcc/gcc-6.1.0/$GCC_VERSION.tar.bz2
  wget https://www.kernel.org/pub/linux/kernel/v3.x/linux-3.17.2.tar.xz
  wget http://ftpmirror.gnu.org/glibc/$GLIBC_VERSION.tar.xz
  wget http://ftpmirror.gnu.org/glibc/glibc-ports-2.13.tar.bz2
  wget http://ftpmirror.gnu.org/mpfr/$MPFR_VERSION.tar.xz
  wget http://ftpmirror.gnu.org/gmp/$GMP_VERSION.tar.xz
  wget http://ftpmirror.gnu.org/mpc/$MPC_VERSION.tar.gz
  wget ftp://gcc.gnu.org/pub/gcc/infrastructure/$ISL_VERSION.tar.bz2
  wget ftp://gcc.gnu.org/pub/gcc/infrastructure/$CLOOG_VERSION.tar.gz

# Extract everything
  echo "Uncompressing toolchain source"
  for f in *.tar*; do tar xf $f; done
}

makelinks(){
  cd $WORKDIR/$GCC_VERSION
  ln -sf ../mpfr-*/   mpfr
  ln -sf ../gmp-*/    gmp
  ln -sf ../mpc-*/    mpc
  ln -sf ../isl-*/    isl
  ln -sf ../cloog-*/  cloog

  cd $WORKDIR/$GLIBC_VERSION
  ln -sf ../glibc-ports-2.13 ports

# need to modify unwind-forcedunwind.c unwind-resume.c in
#    glibc-ports-2.13/sysdeps/unix/sysv/linux/arm/eabi/nptl/
# and
#    glibc-ports-2.13/sysdeps/unix/sysv/linux/arm/nptl/
# change:
#      static void (*libgcc_s_resume) (struct _Unwind_Exception *exc);
# to:
#      static void (*libgcc_s_resume) (struct _Unwind_Exception *exc)
#        __attribute_used__;
#
}

build_binutils() {
# Step 1. Binutils
  cd $WORKDIR
  rm -rf build-binutils
  mkdir -p build-binutils
  cd build-binutils
  ../$BINUTILS_VERSION/configure --prefix=$INSTALL_PATH \
        --target=$TARGET_NAME \
        --with-sysroot=/ \
        --with-float=hard \
        --without-ppl \
        --without-cloog \
        --disable-werror \
        --enable-multilib \
        --disable-libada \
        --disable-libssp \
        --enable-version-specific-runtime-libs \
        --enable-plugins \
        --enable-gold \
        --enable-ld=default \
        --enable-lto \
        --disable-nls

  sed -i 's/-g -O2/-O3/g' Makefile
  sed -i 's/-O2 -g/-O3/g' Makefile
  make -j4
  make install
}
###################################################################

install_kernel_header() {
# Step 2. Linux Kernel Headers
  cd $WORKDIR/$LINUX_KERNEL_VERSION
  make ARCH=$LINUX_ARCH INSTALL_HDR_PATH=$INSTALL_PATH/$TARGET_NAME  headers_install
}
###################################################################

build_bootstrap_gcc() {
# Step 3. C/C++ Compilers
# Make symbolic links
  cd $WORKDIR
  rm -rf build-gcc
  mkdir -p build-gcc
  cd build-gcc
  ../$GCC_VERSION/configure --prefix=$INSTALL_PATH \
        --target=$TARGET_NAME \
        --with-sysroot=/ \
        --without-Headers \
        --with-float=hard \
        --without-ppl \
        --without-cloog \
        --with-gnu-as \
        --with-gnu-ld \
        --enable-languages=c \
        --enable-gold \
        --enable-ld=default \
        --enable-plugin \
        --enable-lto \
        --enable-__cxa_atexit \
        --disable-libada \
        --disable-libmudflap \
        --disable-libssp \
        --enable-multilib \
        --disable-libatomic \
        --disable-libitm \
        --enable-multiarch \
        --disable-libquadmath \
        --disable-libgomp \
        --disable-libmpx \
        --enable-tls \
        --disable-shared \
        --disable-decimal-float \
        --enable-c99 \
        --enable-long-long \
        --disable-threads \
        --disable-libstdcxx-pch \
        --enable-libstdcxx-time \
        --enable-clocale=gnu \
        --disable-nls \
        --enable-checking=release \
        --with-default-libstdcxx-abi=gcc4-compatible

  sed -i 's/-g -O2/-O3/g' Makefile
  sed -i 's/-O2 -g/-O3/g' Makefile
  make -j4 all-gcc
  make install-gcc
  make -j4 all-target-libgcc
  make install-target-libgcc

  pushd $INSTALL_PATH/lib/gcc/$TARGET_NAME/$GCCVERSION
  ln -s libgcc.a libgcc_eh.a
  popd
}
###################################################################

build_glibc() {
# Step 4. Standard C Library Headers and Startup Files
  cd $WORKDIR
  rm -rf build_glibc
  mkdir -p build-glibc
  cd build-glibc

  ../$GLIBC_VERSION/configure --prefix= \
        --build=$HOST_NAME \
        --host=$TARGET_NAME \
        --with-sysroot=/ \
        --with-float=hard \
        --enable-kernel=2.6.30 \
        --with-headers=$INSTALL_PATH/$TARGET_NAME/include \
        libc_cv_forced_unwind=yes \
        libc_cv_c_cleanup=yes \
        --disable-profile \
        --enable-add-ons \
        --enable-bind-now \
        --with-elf \
        --with-tls \
        --with-__thread \
        --without-cvs \
        --without-gd \
        --enable-obsolete-rpc \
        --disable-build-nscd \
        --disable-nscd \
        --enable-lock-elision \
        --disable-timezone-tools

#  make install-bootstrap-headers=yes install-headers
  make cross-compiling=yes install_root=$INSTALL_PATH/$TARGET_NAME \
      prefix="" install-headers

  make -j4 csu/subdir_lib
  install csu/crt1.o csu/crti.o csu/crtn.o $INSTALL_PATH/$TARGET_NAME/lib
  $TARGET_NAME-gcc -nostdlib -nostartfiles -shared -x c /dev/null \
      -o $INSTALL_PATH/$TARGET_NAME/lib/libc.so
  mkdir -p $INSTALL_PATH/$TARGET_NAME/include/gnu
  touch $INSTALL_PATH/$TARGET_NAME/include/gnu/stubs.h
}
###################################################################

build_standard_c_library() {
# Step 5. Standard C Library & the rest of Glibc
  cd $WORKDIR/build-glibc

  make -j4
  make install_root=$INSTALL_PATH/$TARGET_NAME install
}
###################################################################

build_standard_cpp_library() {
# Step 6. Standard C++ Library & the rest of GCC
  cd $WORKDIR/build-gcc
  rm -rf *
  ../$GCC_VERSION/configure --prefix=$INSTALL_PATH \
        --target=$TARGET_NAME \
        --with-sysroot=/ \
        --with-float=hard \
        --without-ppl \
        --without-cloog \
        --with-gnu-as \
        --with-gnu-ld \
        --enable-languages=c,c++ \
        --enable-gold \
        --enable-ld=default \
        --enable-plugin \
        --enable-lto \
        --enable-__cxa_atexit \
        --disable-libada \
        --disable-libmudflap \
        --disable-libssp \
        --enable-multilib \
        --disable-libatomic \
        --disable-libitm \
        --enable-multiarch \
        --disable-libquadmath \
        --disable-libgomp \
        --disable-libmpx \
        --enable-tls \
        --enable-shared \
        --disable-static \
        --enable-c99 \
        --enable-long-long \
        --enable-threads=posix \
        --disable-libstdcxx-pch \
        --enable-libstdcxx-time \
        --enable-clocale=gnu \
        --disable-nls \
        --enable-checking=release \
        --with-default-libstdcxx-abi=gcc4-compatible

  sed -i 's/-g -O2/-O3/g' Makefile
  sed -i 's/-O2 -g/-O3/g' Makefile

  sed -i 's/\/lib\///g' $INSTALL_PATH/$TARGET_NAME/lib/libc.so
  sed -i 's/\/lib\///g' $INSTALL_PATH/$TARGET_NAME/lib/libpthread.so

  make -j4 all
  make install
}
###################################################################

#build_binutils
#install_kernel_header
#build_bootstrap_gcc
#build_glibc
#build_standard_c_library
#build_standard_cpp_library

trap - EXIT
echo 'Success!'
----------------------------------

因为路径和文件权限属性问题，运行时可能会有类似
sshd: error while loading shared libraries: libcrypto.so.35: cannot open shared object file: No such file or directory

暂时不管
